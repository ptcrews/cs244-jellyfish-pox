from collections import defaultdict
import matplotlib.pyplot as plt
import random
import copy
import ast

K_VAL = 8

KSP_MODE = 0
ECMP8_MODE = 1
ECMP64_MODE = 2
MODE = KSP_MODE

MODE = KSP_MODE
class Paths ():
    adjacency = defaultdict(lambda:defaultdict(lambda:(None,None)))
    path_map = defaultdict(lambda:defaultdict(lambda:(None,None)))
    switches_by_dpid = []
    # Adjacency map.  [sw1][sw2] -> port from sw1 to sw2
    def __init__ (self, topo=None):
        self.adjacency.clear()
        self.path_map.clear()

        if topo == None:
            return

        for switch in topo.switches:
            self.switches_by_dpid.append(switch.dpid)

        for link in topo.links:
            first_node = link.intf1.node
            second_node = link.intf2.node
            if first_node in topo.switches and second_node in topo.switches:
                first_dpid = first_node.dpid
                second_dpid = second_node.dpid
                self.adjacency[first_dpid][second_dpid] = 1
                self.adjacency[second_dpid][first_dpid] = 1

    def get_paths(self, path_map, switchlist, adjacency, src, dst):
        # Recomptues all paths if path_map is empty
        if len(path_map) == 0:
            self.compute_all_paths(path_map, switchlist, adjacency)
        return path_map[src][dst]


    # Simple source - to - dest Dijkstra implementation
    # switches = list of switch ids (e.g. switches_by_dpid.values())
    def dijkstra (self, switches, adjacency, source, dest):
        # List of all the switches by dpid
        # TODO: Should probably be a set...
        Q = copy.deepcopy(switches)

        dist = {}
        prev = {}

        for v in Q:
            dist[v] = float('Inf')
            prev[v] = None

        dist[source] = 0

        while len(Q) > 0:
            min_found = None
            for u in Q:
                if min_found == None or dist[u] < dist[min_found]:
                    min_found = u

            # No path found
            if min_found == float('Inf'):
                return []

            Q.remove(min_found)

            for v in adjacency[min_found]:
                port = adjacency[min_found][v]
                if dist[min_found] + 1 < dist[v]:
                    dist[v] = dist[min_found] + 1
                    prev[v] = min_found

            if min_found == dest:
                break

        path = []
        prev_node = dest
        path.insert(0, (prev_node, None))
        while prev_node in prev and prev[prev_node] != None:
            cur_node = prev[prev_node]
            path.insert(0, (cur_node, adjacency[cur_node][prev_node]))
            prev_node = cur_node

        if prev_node != source:
            return []

        return path

    def delete_node(self, adjacency, switches, node):
        for i in switches:
            self.remove_edges(adjacency, node, i)

    def dump(self, adjacency):
        for node in adjacency:
            for connected in adjacency[node]:
                    str(adjacency[node][connected])

    #def check_integrity

    def remove_edges(self, adjacency, first_node, second_node):
        if adjacency[first_node][second_node] != None:
            del adjacency[first_node][second_node]
        if adjacency[second_node][first_node] != None:
            del adjacency[second_node][first_node]

    def find_remove_min(self, path_list):
        if len(path_list) == 0:
            return None

        min_index = 0
        for i in range(len(path_list)):
            if len(path_list[i]) < len(path_list[min_index]):
                min_index = i
        res = path_list[i]
        del path_list[i]
        return res

    # This implementation now *kind of* works
    # Heavily inspired by the Wikipedia psuedo-code for Yen's K shortest paths
    # algorithm
    def yen_ksp(self, switches, adjacency, source, dest, K):
        A = []
        # Find the shortest path
        A.append(self.dijkstra(switches, adjacency, source, dest))
 #       print "Dijkstra result from " + str(source) + " to " + str(dest) + " is: " + str(A)
        B = []

        for k in range(1, K):
            for i in range(0, len(A[k-1])-1):
                adjacency_copy = copy.deepcopy(adjacency)
                spurNode = A[k-1][i] # Should retrieve i-th node

                rootPath = A[k-1][:i+1]

                for p in A:
                    if rootPath == p[:i+1]:
                        first_node = p[i][0]
                        second_node = p[i+1][0]
                        self.remove_edges(adjacency_copy, first_node, second_node)

                for node in rootPath:
                    if node == spurNode:
                        continue
                    self.delete_node(adjacency_copy, switches, node[0])

                spurPath = self.dijkstra(switches, adjacency_copy, spurNode[0], dest)
                if spurPath == []:
                    continue

                totalPath = rootPath + spurPath[1:]
                B.append(totalPath)

                # Restore edges to graph... :/

            if len(B) == 0:
                break

            A.append(self.find_remove_min(B))

        return A

    def compute_all_paths (self, path_map, switches, adjacency):
        path_map.clear()
        for i in switches:
            for j in switches:
                if MODE == KSP_MODE:
                    res = self.yen_ksp(switches, adjacency, i, j, K_VAL)
                elif MODE == ECMP8_MODE:
                    res = self.ecmp(switches, adjacency, i, j, 8)
                else: # MODE == ECMP64_MODE
                    res = self.ecmp(switches, adjacency, i, j, 64)
                path_map[i][j] = res

    def ecmp (self, switches, adjacency, src, dst, K):
        ksp = self.yen_ksp(switches, adjacency, src, dst, K)
        '''ksp8 = self.yen_ksp(switches, adjacency, src, dst, 8)
        print "KSP8 is: " + str(ksp8)
        ksp64 = self.yen_ksp(switches, adjacency, src, dst, 64)
        quit = 0
        if len(ksp64) < len(ksp8):
            print "ERROR!! KSP8 found more paths"
            quit = 1
        for path in ksp8:
            path_in_ksp64 = 0
            for path64 in ksp64:
                if path64 == path:
                    print "match"
                    path_in_ksp64 = 1
                    break
            print "hi"
            if path_in_ksp64 == 0:
                print "ERROR: path: " + str(path) + " is in ksp8 but not ksp64"
                exit()
        print "KSP64 is: " + str(ksp64)
        print "ksp before sort: " + str(ksp)'''
        ksp.sort(key=len)
        '''        ksp64.sort(key=len)
        ksp8.sort(key=len)
        print "ksp after sort: " + str(ksp)'''
        shortest_path_length = len(ksp[0])
        '''        print "shortest length path ksp8 is: " + str(len(ksp8[0]))
        print "shortest length path ksp64 is: " + str(len(ksp64[0]))
        if quit == 1:
            exit()
            while(1):
                print "FAILURE"'''
        for path in ksp:
            if len(path) > shortest_path_length:
                ksp.remove(path)

        '''        for path in ksp8:
            if len(path) > len(ksp8[0]):
                ksp8.remove(path)
        for path in ksp64:
            if len(path) > len(ksp64[0]):
                ksp64.remove(path)
        if(len(ksp8) > len(ksp64)):
            print "ERROR NUMBER 2"
            exit()'''
        return ksp

    def simple_test (self):
        switches = [0, 1, 2, 3, 4, 5, 6, 7]
        n_ports = 3
        hosts_per_switch = 24
        adjacency = defaultdict(lambda:defaultdict(lambda:(None,None)))
        # Simple tree topology
        self.adjacency[0][1] = 0
        self.adjacency[1][0] = 0

        self.adjacency[0][2] = 1
        self.adjacency[2][0] = 1

        self.adjacency[1][3] = 1
        self.adjacency[3][1] = 1

        self.adjacency[2][4] = 1
        self.adjacency[4][2] = 1

        adjacency[1][7] = 1
        adjacency[7][1] = 1

        adjacency[7][4] = 1
        adjacency[4][7] = 1

        adjacency[6][4] = 1
        adjacency[4][6] = 1

        adjacency[7][5] = 1
        adjacency[5][7] = 1

        adjacency[5][6] = 0
        adjacency[6][5] = 0

        adjacency[5][0] = 2
        adjacency[0][5] = 2


#        res = self.yen_ksp(switches, adjacency, 3, 4, 2)
#        ecmp_res = self.ecmp(switches, adjacency, 3, 4, 2)
#        print "K shortest paths: " + str(res)
#        print "ECMP-2: " + str(ecmp_res)
        '''        adjacency2 = copy.deepcopy(adjacency)
        adjacency3 = copy.deepcopy(adjacency)
        switches2 = copy.deepcopy(switches)
        switches3 = copy.deepcopy(switches)
        ksp_res = self.count_distinct_paths(adjacency, switches, hosts_per_switch, KSP_MODE, None)
        ecmp8_res = self.count_distinct_paths(adjacency2, switches2, hosts_per_switch, ECMP8_MODE, ksp_res[1])
        ecmp64_res = self.count_distinct_paths(adjacency3, switches3, hosts_per_switch, ECMP64_MODE, ksp_res[1])


        print "KSP Result: " + str(ksp_res[0])
        print "ECMP-8 Result: " + str(ecmp8_res[0])
        print "ECMP-64 Result: " + str(ecmp64_res[0]) '''


#        self.plot_results(ksp_res[0], ecmp8_res[0], ecmp64_res[0])

        ksp_string = u'[1, 1, 2, 2, 3, 3, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 172, 173, 173, 173, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 186, 186, 186, 186, 186, 186, 187, 187, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 190, 190, 191, 191, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 193, 193, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 195, 195, 195, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 197, 198, 198, 198, 198, 198, 198, 198, 198, 199, 199, 200, 200, 200, 200, 200, 200, 200, 200, 201, 201, 203, 203, 203, 203, 203, 203, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 206, 206, 206, 207, 207, 207, 207, 208, 208, 208, 208, 208, 208, 209, 209, 209, 209, 210, 210, 211, 211, 213, 213, 214, 214, 215, 215, 216, 216, 216, 216, 217, 217, 218, 218, 218, 218, 219, 219, 219, 219, 220, 220, 220, 220, 221, 221, 223, 223, 223, 223, 224, 224, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 228, 228, 229, 229, 230, 230, 231, 231, 231, 231, 231, 231, 231, 231, 232, 232, 233, 233, 233, 233, 233, 233, 234, 234, 234, 234, 235, 235, 235, 235, 236, 236, 236, 236, 237, 237, 237, 237, 238, 238, 238, 238, 238, 238, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 242, 242, 242, 242, 242, 242, 243, 243, 243, 243, 245, 245, 245, 245, 246, 246, 246, 246, 250, 250, 251, 251, 254, 254, 255, 255, 257, 257, 258, 258, 258, 258, 260, 260, 260, 260, 261, 261, 261, 261, 262, 262, 264, 264, 264, 264, 266, 266, 266, 266, 267, 267, 267, 267, 267, 267, 269, 269, 271, 271, 271, 271, 273, 273, 275, 275, 276, 276, 278, 278, 280, 280, 280, 280, 280, 280, 282, 282, 283, 283, 284, 284, 286, 286, 287, 287, 288, 288, 288, 288, 288, 288, 288, 288, 289, 289, 290, 290, 293, 293, 294, 294, 296, 296, 297, 297, 301, 301, 303, 303, 304, 304, 306, 306, 307, 307, 311, 311, 311, 311, 312, 312, 314, 314, 318, 318, 320, 320, 331, 331, 333, 333, 334, 334, 336, 336, 338, 338, 338, 338, 339, 339, 340, 340, 345, 345, 346, 346, 351, 351, 360, 360, 363, 363, 363, 363, 365, 365, 370, 370, 372, 372, 374, 374, 379, 379, 387, 387, 402, 402, 404, 404, 441, 441]'
        
        ecmp8_string = u'[1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 112, 112, 113, 113, 113, 113, 113, 113, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 118, 118, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 126, 126, 127, 127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 129, 131, 131, 132, 132, 133, 133, 133, 133, 134, 134, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 139, 139, 140, 140, 144, 144, 146, 146, 147, 147, 147, 147, 149, 149, 149, 149, 149, 149, 149, 149, 151, 151, 152, 152, 152, 152, 154, 154, 156, 156, 157, 157, 157, 157, 162, 162, 167, 167, 168, 168, 168, 168, 169, 169, 171, 171, 172, 172, 178, 178, 182, 182, 199, 199]'

        ecmp64_string = u'[806, 806]' # 883, 883, 900, 900, 902, 902, 908, 908, 922, 922, 951, 951, 954, 954, 957, 957, 999, 999, 1013, 1013, 1044, 1044, 1055, 1055, 1066, 1066, 1075, 1075, 1084, 1084, 1095, 1095, 1111, 1111, 1129, 1129, 1139, 1139, 1143, 1143, 1149, 1149, 1155, 1155, 1160, 1160, 1161, 1161, 1179, 1179, 1181, 1181, 1190, 1190, 1223, 1223, 1225, 1225, 1237, 1237, 1246, 1246, 1264, 1264, 1267, 1267, 1268, 1268, 1270, 1270, 1279, 1279, 1287, 1287, 1287, 1287, 1295, 1295, 1297, 1297, 1315, 1315, 1320, 1320, 1344, 1344, 1344, 1344, 1347, 1347, 1369, 1369, 1376, 1376, 1385, 1385, 1386, 1386, 1386, 1386, 1392, 1392, 1393, 1393, 1412, 1412, 1417, 1417, 1418, 1418, 1427, 1427, 1427, 1427, 1428, 1428, 1430, 1430, 1445, 1445, 1456, 1456, 1462, 1462, 1462, 1462, 1462, 1462, 1476, 1476, 1477, 1477, 1477, 1477, 1486, 1486, 1489, 1489, 1493, 1493, 1496, 1496, 1496, 1496, 1496, 1496, 1498, 1498, 1502, 1502, 1507, 1507, 1516, 1516, 1516, 1516, 1520, 1520, 1521, 1521, 1523, 1523, 1526, 1526, 1528, 1528, 1528, 1528, 1529, 1529, 1530, 1530, 1532, 1532, 1535, 1535, 1540, 1540, 1540, 1540, 1541, 1541, 1543, 1543, 1550, 1550, 1551, 1551, 1557, 1557, 1561, 1561, 1564, 1564, 1566, 1566, 1567, 1567, 1568, 1568, 1575, 1575, 1578, 1578, 1582, 1582, 1582, 1582, 1584, 1584, 1590, 1590, 1591, 1591, 1594, 1594, 1599, 1599, 1600, 1600, 1606, 1606, 1607, 1607, 1610, 1610, 1616, 1616, 1616, 1616, 1623, 1623, 1631, 1631, 1631, 1631, 1632, 1632, 1635, 1635, 1637, 1637, 1637, 1637, 1640, 1640, 1642, 1642, 1647, 1647, 1649, 1649, 1651, 1651, 1654, 1654, 1654, 1654, 1657, 1657, 1657, 1657, 1658, 1658, 1671, 1671, 1678, 1678, 1683, 1683, 1683, 1683, 1685, 1685, 1689, 1689, 1691, 1691, 1701, 1701, 1709, 1709, 1711, 1711, 1712, 1712, 1713, 1713, 1713, 1713, 1717, 1717, 1720, 1720, 1724, 1724, 1725, 1725, 1727, 1727, 1727, 1727, 1730, 1730, 1731, 1731, 1734, 1734, 1734, 1734, 1735, 1735, 1736, 1736, 1737, 1737, 1737, 1737, 1748, 1748, 1753, 1753, 1763, 1763, 1765, 1765, 1773, 1773, 1773, 1773, 1776, 1776, 1776, 1776, 1776, 1776, 1779, 1779, 1784, 1784, 1784, 1784, 1790, 1790, 1792, 1792, 1794, 1794, 1794, 1794, 1795, 1795, 1801, 1801, 1807, 1807, 1817, 1817, 1819, 1819, 1820, 1820, 1821, 1821, 1824, 1824, 1828, 1828, 1851, 1851, 1858, 1858, 1862, 1862, 1863, 1863, 1865, 1865, 1868, 1868, 1868, 1868, 1870, 1870, 1871, 1871, 1872, 1872, 1872, 1872, 1872, 1872, 1874, 1874, 1874, 1874, 1882, 1882, 1885, 1885, 1886, 1886, 1889, 1889, 1893, 1893, 1904, 1904, 1905, 1905, 1908, 1908, 1910, 1910, 1919, 1919, 1919, 1919, 1921, 1921, 1921, 1921, 1925, 1925, 1926, 1926, 1926, 1926, 1927, 1927, 1928, 1928, 1930, 1930, 1930, 1930, 1934, 1934, 1934, 1934, 1935, 1935, 1939, 1939, 1945, 1945, 1946, 1946, 1947, 1947, 1949, 1949, 1950, 1950, 1951, 1951, 1953, 1953, 1954, 1954, 1955, 1955, 1960, 1960, 1961, 1961, 1961, 1961, 1964, 1964, 1966, 1966, 1966, 1966, 1969, 1969, 1977, 1977, 1979, 1979, 1979, 1979, 1982, 1982, 1983, 1983, 1987, 1987, 1994, 1994, 1995, 1995, 1997, 1997, 1998, 1998, 2006, 2006, 2011, 2011, 2011, 2011, 2012, 2012, 2013, 2013, 2014, 2014, 2017, 2017, 2022, 2022, 2024, 2024, 2032, 2032, 2033, 2033, 2033, 2033, 2033, 2033, 2039, 2039, 2041, 2041, 2042, 2042, 2044, 2044, 2044, 2044, 2056, 2056, 2057, 2057, 2059, 2059, 2061, 2061, 2061, 2061, 2064, 2064, 2066, 2066, 2071, 2071, 2071, 2071, 2080, 2080, 2085, 2085, 2086, 2086, 2090, 2090, 2093, 2093, 2095, 2095, 2096, 2096, 2098, 2098, 2099, 2099, 2104, 2104, 2108, 2108, 2108, 2108, 2109, 2109, 2116, 2116, 2116, 2116, 2116, 2116, 2121, 2121, 2125, 2125, 2126, 2126, 2127, 2127, 2127, 2127, 2131, 2131, 2133, 2133, 2140, 2140, 2142, 2142, 2145, 2145, 2150, 2150, 2153, 2153, 2154, 2154, 2159, 2159, 2160, 2160, 2161, 2161, 2163, 2163, 2165, 2165, 2166, 2166, 2168, 2168, 2168, 2168, 2169, 2169, 2171, 2171, 2172, 2172, 2175, 2175, 2175, 2175, 2176, 2176, 2183, 2183, 2187, 2187, 2189, 2189, 2189, 2189, 2190, 2190, 2190, 2190, 2192, 2192, 2194, 2194, 2196, 2196, 2198, 2198, 2200, 2200, 2202, 2202, 2202, 2202, 2204, 2204, 2204, 2204, 2210, 2210, 2212, 2212, 2214, 2214, 2215, 2215, 2217, 2217, 2223, 2223, 2227, 2227, 2230, 2230, 2233, 2233, 2236, 2236, 2239, 2239, 2239, 2239, 2241, 2241, 2242, 2242, 2243, 2243, 2250, 2250, 2250, 2250, 2253, 2253, 2256, 2256, 2257, 2257, 2257, 2257, 2257, 2257, 2259, 2259, 2259, 2259, 2266, 2266, 2270, 2270, 2275, 2275, 2279, 2279, 2279, 2279, 2280, 2280, 2280, 2280, 2282, 2282, 2282, 2282, 2285, 2285, 2293, 2293, 2293, 2293, 2296, 2296, 2296, 2296, 2299, 2299, 2300, 2300, 2300, 2300, 2314, 2314, 2315, 2315, 2315, 2315, 2319, 2319, 2321, 2321, 2324, 2324, 2326, 2326, 2328, 2328, 2329, 2329, 2331, 2331, 2332, 2332, 2336, 2336, 2337, 2337, 2338, 2338, 2351, 2351, 2351, 2351, 2358, 2358, 2363, 2363, 2366, 2366, 2370, 2370, 2375, 2375, 2375, 2375, 2376, 2376, 2378, 2378, 2382, 2382, 2386, 2386, 2388, 2388, 2394, 2394, 2395, 2395, 2403, 2403, 2405, 2405, 2407, 2407, 2407, 2407, 2409, 2409, 2410, 2410, 2410, 2410, 2411, 2411, 2418, 2418, 2421, 2421, 2423, 2423, 2428, 2428, 2429, 2429, 2430, 2430, 2431, 2431, 2432, 2432, 2438, 2438, 2439, 2439, 2446, 2446, 2447, 2447, 2459, 2459, 2460, 2460, 2462, 2462, 2464, 2464, 2464, 2464, 2465, 2465, 2466, 2466, 2468, 2468, 2480, 2480, 2484, 2484, 2484, 2484, 2486, 2486, 2491, 2491, 2493, 2493, 2499, 2499, 2502, 2502, 2505, 2505, 2505, 2505, 2509, 2509, 2513, 2513, 2515, 2515, 2520, 2520, 2523, 2523, 2525, 2525, 2526, 2526, 2533, 2533, 2533, 2533, 2539, 2539, 2542, 2542, 2543, 2543, 2545, 2545, 2548, 2548, 2554, 2554, 2556, 2556, 2557, 2557, 2557, 2557, 2559, 2559, 2561, 2561, 2561, 2561, 2561, 2561, 2567, 2567, 2568, 2568, 2570, 2570, 2572, 2572, 2572, 2572, 2575, 2575, 2575, 2575, 2576, 2576, 2576, 2576, 2579, 2579, 2579, 2579, 2581, 2581, 2582, 2582, 2585, 2585, 2587, 2587, 2589, 2589, 2591, 2591, 2591, 2591, 2591, 2591, 2598, 2598, 2601, 2601, 2601, 2601, 2603, 2603, 2607, 2607, 2607, 2607, 2612, 2612, 2613, 2613, 2613, 2613, 2614, 2614, 2622, 2622, 2623, 2623, 2627, 2627, 2630, 2630, 2630, 2630, 2634, 2634, 2634, 2634, 2634, 2634, 2637, 2637, 2638, 2638, 2639, 2639, 2646, 2646, 2649, 2649, 2651, 2651, 2668, 2668, 2670, 2670, 2675, 2675, 2681, 2681, 2682, 2682, 2683, 2683, 2683, 2683, 2683, 2683, 2684, 2684, 2687, 2687, 2690, 2690, 2692, 2692, 2692, 2692, 2693, 2693, 2695, 2695, 2696, 2696, 2697, 2697, 2697, 2697, 2699, 2699, 2699, 2699, 2705, 2705, 2706, 2706, 2707, 2707, 2709, 2709, 2712, 2712, 2714, 2714, 2719, 2719, 2721, 2721, 2732, 2732, 2734, 2734, 2739, 2739, 2743, 2743, 2743, 2743, 2745, 2745, 2745, 2745, 2752, 2752, 2753, 2753, 2757, 2757, 2760, 2760, 2760, 2760, 2761, 2761, 2762, 2762, 2764, 2764, 2765, 2765, 2766, 2766, 2771, 2771, 2772, 2772, 2772, 2772, 2778, 2778, 2791, 2791, 2794, 2794, 2796, 2796, 2796, 2796, 2797, 2797, 2801, 2801, 2806, 2806, 2807, 2807, 2809, 2809, 2813, 2813, 2821, 2821, 2827, 2827, 2829, 2829, 2832, 2832, 2832, 2832, 2833, 2833, 2833, 2833, 2835, 2835, 2837, 2837, 2840, 2840, 2842, 2842, 2845, 2845, 2847, 2847, 2851, 2851, 2852, 2852, 2853, 2853, 2854, 2854, 2854, 2854, 2854, 2854, 2860, 2860, 2861, 2861, 2866, 2866, 2873, 2873, 2874, 2874, 2875, 2875, 2876, 2876, 2877, 2877, 2879, 2879, 2880, 2880, 2883, 2883, 2887, 2887, 2888, 2888, 2890, 2890, 2897, 2897, 2904, 2904, 2907, 2907, 2908, 2908, 2911, 2911, 2915, 2915, 2920, 2920, 2922, 2922, 2924, 2924, 2925, 2925, 2925, 2925, 2926, 2926, 2926, 2926, 2927, 2927, 2929, 2929, 2930, 2930, 2935, 2935, 2936, 2936, 2941, 2941, 2941, 2941, 2943, 2943, 2946, 2946, 2948, 2948, 2948, 2948, 2949, 2949, 2950, 2950, 2955, 2955, 2959, 2959, 2962, 2962, 2968, 2968, 2970, 2970, 2972, 2972, 2972, 2972, 2973, 2973, 2973, 2973, 2974, 2974, 2976, 2976, 2978, 2978, 2986, 2986, 2992, 2992, 2995, 2995, 2996, 2996, 3005, 3005, 3012, 3012, 3019, 3019, 3026, 3026, 3027, 3027, 3028, 3028, 3028, 3028, 3029, 3029, 3029, 3029, 3031, 3031, 3035, 3035, 3037, 3037, 3037, 3037, 3045, 3045, 3048, 3048, 3050, 3050, 3059, 3059, 3066, 3066, 3066, 3066, 3067, 3067, 3073, 3073, 3076, 3076, 3076, 3076, 3078, 3078, 3080, 3080, 3085, 3085, 3089, 3089, 3089, 3089, 3090, 3090, 3090, 3090, 3092, 3092, 3102, 3102, 3102, 3102, 3107, 3107, 3112, 3112, 3113, 3113, 3113, 3113, 3113, 3113, 3119, 3119, 3122, 3122, 3123, 3123, 3125, 3125, 3126, 3126, 3127, 3127, 3130, 3130, 3130, 3130, 3132, 3132, 3132, 3132, 3133, 3133, 3140, 3140, 3142, 3142, 3144, 3144, 3145, 3145, 3150, 3150, 3150, 3150, 3153, 3153, 3154, 3154, 3155, 3155, 3156, 3156, 3158, 3158, 3159, 3159, 3159, 3159, 3162, 3162, 3162, 3162, 3166, 3166, 3167, 3167, 3169, 3169, 3172, 3172, 3176, 3176, 3177, 3177, 3180, 3180, 3184, 3184, 3185, 3185, 3186, 3186, 3188, 3188, 3189, 3189, 3192, 3192, 3195, 3195, 3199, 3199, 3200, 3200, 3200, 3200, 3201, 3201, 3204, 3204, 3207, 3207, 3210, 3210, 3219, 3219, 3222, 3222, 3226, 3226, 3230, 3230, 3232, 3232, 3234, 3234, 3236, 3236, 3242, 3242, 3245, 3245, 3247, 3247, 3247, 3247, 3249, 3249, 3253, 3253, 3254, 3254, 3255, 3255, 3255, 3255, 3258, 3258, 3263, 3263, 3263, 3263, 3264, 3264, 3265, 3265, 3266, 3266, 3268, 3268, 3271, 3271, 3278, 3278, 3285, 3285, 3294, 3294, 3299, 3299, 3302, 3302, 3304, 3304, 3307, 3307, 3310, 3310, 3310, 3310, 3310, 3310, 3311, 3311, 3312, 3312, 3313, 3313, 3313, 3313, 3314, 3314, 3318, 3318, 3329, 3329, 3330, 3330, 3335, 3335, 3337, 3337, 3343, 3343, 3344, 3344, 3346, 3346, 3346, 3346, 3348, 3348, 3349, 3349, 3351, 3351, 3353, 3353, 3356, 3356, 3359, 3359, 3361, 3361, 3370, 3370, 3371, 3371, 3374, 3374, 3378, 3378, 3382, 3382, 3388, 3388, 3391, 3391, 3393, 3393, 3397, 3397, 3399, 3399, 3408, 3408, 3410, 3410, 3411, 3411, 3414, 3414, 3417, 3417, 3418, 3418, 3419, 3419, 3422, 3422, 3422, 3422, 3427, 3427, 3428, 3428, 3437, 3437, 3441, 3441, 3445, 3445, 3451, 3451, 3452, 3452, 3452, 3452, 3462, 3462, 3467, 3467, 3479, 3479, 3485, 3485, 3485, 3485, 3487, 3487, 3492, 3492, 3492, 3492, 3498, 3498, 3504, 3504, 3506, 3506, 3511, 3511, 3515, 3515, 3515, 3515, 3519, 3519, 3521, 3521, 3522, 3522, 3522, 3522, 3525, 3525, 3527, 3527, 3527, 3527, 3528, 3528, 3531, 3531, 3537, 3537, 3539, 3539, 3547, 3547, 3550, 3550, 3551, 3551, 3555, 3555, 3556, 3556, 3558, 3558, 3564, 3564, 3565, 3565, 3566, 3566, 3567, 3567, 3575, 3575, 3575, 3575, 3582, 3582, 3583, 3583, 3586, 3586, 3588, 3588, 3588, 3588, 3590, 3590, 3594, 3594, 3597, 3597, 3600, 3600, 3602, 3602, 3604, 3604, 3605, 3605, 3608, 3608, 3609, 3609, 3613, 3613, 3621, 3621, 3622, 3622, 3623, 3623, 3623, 3623, 3625, 3625, 3626, 3626, 3627, 3627, 3631, 3631, 3633, 3633, 3636, 3636, 3642, 3642, 3643, 3643, 3643, 3643, 3644, 3644, 3647, 3647, 3651, 3651, 3665, 3665, 3668, 3668, 3672, 3672, 3672, 3672, 3675, 3675, 3678, 3678, 3684, 3684, 3685, 3685, 3688, 3688, 3694, 3694, 3695, 3695, 3696, 3696, 3707, 3707, 3709, 3709, 3718, 3718, 3720, 3720, 3727, 3727, 3732, 3732, 3736, 3736, 3741, 3741, 3742, 3742, 3742, 3742, 3744, 3744, 3747, 3747, 3748, 3748, 3753, 3753, 3753, 3753, 3767, 3767, 3771, 3771, 3772, 3772, 3773, 3773, 3784, 3784, 3786, 3786, 3792, 3792, 3794, 3794, 3798, 3798, 3799, 3799, 3804, 3804, 3806, 3806, 3807, 3807, 3810, 3810, 3814, 3814, 3817, 3817, 3819, 3819, 3820, 3820, 3820, 3820, 3820, 3820, 3822, 3822, 3823, 3823, 3826, 3826, 3830, 3830, 3834, 3834, 3837, 3837, 3838, 3838, 3842, 3842, 3848, 3848, 3851, 3851, 3851, 3851, 3855, 3855, 3856, 3856, 3861, 3861, 3864, 3864, 3869, 3869, 3871, 3871, 3873, 3873, 3874, 3874, 3874, 3874, 3876, 3876, 3877, 3877, 3886, 3886, 3886, 3886, 3893, 3893, 3894, 3894, 3897, 3897, 3904, 3904, 3905, 3905, 3907, 3907, 3907, 3907, 3908, 3908, 3908, 3908, 3916, 3916, 3917, 3917, 3918, 3918, 3921, 3921, 3921, 3921, 3927, 3927, 3931, 3931, 3935, 3935, 3936, 3936, 3942, 3942, 3943, 3943, 3950, 3950, 3951, 3951, 3952, 3952, 3952, 3952, 3956, 3956, 3957, 3957, 3957, 3957, 3963, 3963, 3964, 3964, 3964, 3964, 3967, 3967, 3968, 3968, 3975, 3975, 3975, 3975, 3977, 3977, 3977, 3977, 3981, 3981, 3982, 3982, 3983, 3983, 3984, 3984, 3985, 3985, 3987, 3987, 3992, 3992, 4003, 4003, 4004, 4004, 4006, 4006, 4015, 4015, 4015, 4015, 4020, 4020, 4021, 4021, 4023, 4023, 4024, 4024, 4026, 4026, 4029, 4029, 4031, 4031, 4035, 4035, 4036, 4036, 4043, 4043, 4054, 4054, 4060, 4060, 4069, 4069, 4070, 4070, 4072, 4072, 4074, 4074, 4080, 4080, 4088, 4088, 4093, 4093, 4095, 4095, 4098, 4098, 4099, 4099, 4100, 4100, 4103, 4103, 4107, 4107, 4110, 4110, 4114, 4114, 4122, 4122, 4135, 4135, 4135, 4135, 4137, 4137, 4137, 4137, 4139, 4139, 4145, 4145, 4146, 4146, 4152, 4152, 4157, 4157, 4163, 4163, 4169, 4169, 4179, 4179, 4181, 4181, 4182, 4182, 4183, 4183, 4186, 4186, 4188, 4188, 4196, 4196, 4198, 4198, 4201, 4201, 4202, 4202, 4210, 4210, 4216, 4216, 4216, 4216, 4235, 4235, 4236, 4236, 4258, 4258, 4266, 4266, 4267, 4267, 4273, 4273, 4277, 4277, 4279, 4279, 4280, 4280, 4282, 4282, 4284, 4284, 4284, 4284, 4286, 4286, 4290, 4290, 4292, 4292, 4295, 4295, 4299, 4299, 4301, 4301, 4308, 4308, 4311, 4311, 4326, 4326, 4331, 4331, 4333, 4333, 4342, 4342, 4348, 4348, 4349, 4349, 4354, 4354, 4357, 4357, 4360, 4360, 4368, 4368, 4371, 4371, 4388, 4388, 4392, 4392, 4396, 4396, 4407, 4407, 4411, 4411, 4411, 4411, 4413, 4413, 4416, 4416, 4428, 4428, 4451, 4451, 4475, 4475, 4492, 4492, 4495, 4495, 4496, 4496, 4504, 4504, 4506, 4506, 4509, 4509, 4510, 4510, 4512, 4512, 4529, 4529, 4530, 4530, 4530, 4530, 4536, 4536, 4539, 4539, 4539, 4539, 4542, 4542, 4548, 4548, 4550, 4550, 4554, 4554, 4559, 4559, 4560, 4560, 4565, 4565, 4566, 4566, 4567, 4567, 4569, 4569, 4572, 4572, 4587, 4587, 4589, 4589, 4589, 4589, 4595, 4595, 4599, 4599, 4607, 4607, 4615, 4615, 4616, 4616, 4617, 4617, 4621, 4621, 4632, 4632, 4632, 4632, 4633, 4633, 4654, 4654, 4654, 4654, 4677, 4677, 4689, 4689, 4698, 4698, 4702, 4702, 4703, 4703, 4707, 4707, 4707, 4707, 4708, 4708, 4725, 4725, 4726, 4726, 4730, 4730, 4731, 4731, 4733, 4733, 4735, 4735, 4746, 4746, 4760, 4760, 4763, 4763, 4772, 4772, 4775, 4775, 4794, 4794, 4795, 4795, 4796, 4796, 4798, 4798, 4801, 4801, 4802, 4802, 4811, 4811, 4812, 4812, 4824, 4824, 4825, 4825, 4825, 4825, 4832, 4832, 4847, 4847, 4850, 4850, 4851, 4851, 4857, 4857, 4858, 4858, 4860, 4860, 4861, 4861, 4864, 4864, 4867, 4867, 4870, 4870, 4878, 4878, 4902, 4902, 4903, 4903, 4910, 4910, 4914, 4914, 4923, 4923, 4926, 4926, 4930, 4930, 4936, 4936, 4948, 4948, 4956, 4956, 4981, 4981, 4985, 4985, 4988, 4988, 5007, 5007, 5038, 5038, 5041, 5041, 5041, 5041, 5042, 5042, 5048, 5048, 5066, 5066, 5072, 5072, 5079, 5079, 5081, 5081, 5084, 5084, 5107, 5107, 5117, 5117, 5124, 5124, 5127, 5127, 5127, 5127, 5135, 5135, 5145, 5145, 5156, 5156, 5157, 5157, 5189, 5189, 5195, 5195, 5201, 5201, 5203, 5203, 5213, 5213, 5217, 5217, 5225, 5225, 5233, 5233, 5243, 5243, 5248, 5248, 5253, 5253, 5282, 5282, 5291, 5291, 5295, 5295, 5310, 5310, 5312, 5312, 5315, 5315, 5316, 5316, 5319, 5319, 5323, 5323, 5325, 5325, 5328, 5328, 5342, 5342, 5349, 5349, 5349, 5349, 5369, 5369, 5376, 5376, 5377, 5377, 5384, 5384, 5389, 5389, 5391, 5391, 5398, 5398, 5400, 5400, 5402, 5402, 5407, 5407, 5411, 5411, 5412, 5412, 5435, 5435, 5441, 5441, 5442, 5442, 5443, 5443, 5461, 5461, 5486, 5486, 5516, 5516, 5522, 5522, 5532, 5532, 5538, 5538, 5568, 5568, 5571, 5571, 5576, 5576, 5581, 5581, 5593, 5593, 5595, 5595, 5600, 5600, 5604, 5604, 5611, 5611, 5625, 5625, 5630, 5630, 5668, 5668, 5669, 5669, 5688, 5688, 5691, 5691, 5707, 5707, 5707, 5707, 5714, 5714, 5724, 5724, 5735, 5735, 5745, 5745, 5755, 5755, 5763, 5763, 5765, 5765, 5773, 5773, 5779, 5779, 5780, 5780, 5800, 5800, 5802, 5802, 5803, 5803, 5805, 5805, 5857, 5857, 5860, 5860, 5872, 5872, 5896, 5896, 5908, 5908, 5918, 5918, 5919, 5919, 5923, 5923, 5927, 5927, 5931, 5931, 5949, 5949, 5990, 5990, 6020, 6020, 6026, 6026, 6037, 6037, 6064, 6064, 6083, 6083, 6085, 6085, 6089, 6089, 6093, 6093, 6097, 6097, 6101, 6101, 6113, 6113, 6147, 6147, 6148, 6148, 6149, 6149, 6154, 6154, 6157, 6157, 6211, 6211, 6225, 6225, 6244, 6244, 6263, 6263, 6273, 6273, 6274, 6274, 6315, 6315, 6332, 6332, 6336, 6336, 6340, 6340, 6346, 6346, 6346, 6346, 6347, 6347, 6351, 6351, 6423, 6423, 6425, 6425, 6427, 6427, 6438, 6438, 6451, 6451, 6453, 6453, 6463, 6463, 6477, 6477, 6477, 6477, 6488, 6488, 6544, 6544, 6583, 6583, 6659, 6659, 6668, 6668, 6773, 6773, 6774, 6774, 6785, 6785, 6861, 6861, 6875, 6875, 6881, 6881, 6908, 6908, 6918, 6918, 6923, 6923, 6988, 6988, 7015, 7015, 7144, 7144, 7248, 7248, 7275, 7275, 7277, 7277, 7392, 7392, 7413, 7413, 7448, 7448, 7528, 7528, 7545, 7545, 7558, 7558, 7659, 7659, 7695, 7695, 7706, 7706, 7791, 7791, 7811, 7811, 7829, 7829, 7858, 7858, 8100, 8100, 8130, 8130, 8471, 8471, 8710, 8710, 8883, 8883, 8956, 8956, 9197, 9197, 9226, 9226, 9733, 9733, 10062, 10062, 10374, 10374, 12638, 12638]'


        ksp_string_res = ast.literal_eval(ksp_string)
        ecmp8_string_res = ast.literal_eval(ecmp8_string)
        ecmp64_string_res = ast.literal_eval(ecmp64_string)

        self.plot_results(ksp_string_res, ecmp8_string_res, ecmp64_string_res)        
        #self.all_k_shortest_paths(switches, adjacency, 2)



    def count_distinct_paths(self, hosts_per_switch, mode, serverPairs): #mode 0= KSP-8, mode 1=ECMP-8, mode 2=ECMP-64
        #Pass serverPairs if you want to rerun this method with the same traffic permutation as a previous run
        adjacency = self.adjacency
        switches = self.switches_by_dpid
        hosts= []

#        print "Switch count in count_paths is: " + str(len(switches))

        for switchNum in switches:
            for j in range (0, hosts_per_switch):
                hosts.append(switchNum)

        #Now hosts is a list containing each switch number hosts_per_switch times

        distinct_path_count = copy.deepcopy(adjacency)

        #set all elements in this adjacency copy to 0
    #    print "len(dist_path_count is: " + str(len(distinct_path_count))
        for i in distinct_path_count:
#            print "len(dist_path_count[i]) is : " + str(len(distinct_path_count[i]))
            for j in distinct_path_count[i]:
                distinct_path_count[i][j] = 0
   #             print "Storing " + str(distinct_path_count[i][j]) + " in spot " + str(i) + "," + str(j)

        unmatchedServers = []
        if serverPairs is None: #Need to generate new traffic permutation
            serverPairs = [] #List of tuples where each tuple is a pair of servers

            unmatchedServers = copy.copy(hosts) #this is a list containing all servers which have not been paired with another random server


        while len(unmatchedServers) > 0: #Pair each server with another random, as of yet unpaired server
            if len(unmatchedServers) == 1:
                    print "Error - odd number of remaining servers"
                    break
            rand1 = random.randint(0, len(unmatchedServers) - 1)
            rand2 = random.randint(0, len(unmatchedServers) - 1)
            while rand2 == rand1:
                rand2 = random.randint(0, len(unmatchedServers) - 1)
  #          print "Rand1 is: " + str(rand1) + " and len(unamatched) is " + str(len(unmatchedServers)) 
            randServ1 = unmatchedServers[rand1]
            randServ2 = unmatchedServers[rand2]
            serverPairs.append((randServ1, randServ2))
            unmatchedServers.remove(randServ1)
            unmatchedServers.remove(randServ2)

        # Now all servers have been paired

        # HostToSwitchPathCount = []


        for pairing in serverPairs: #Run KSP for each pairing
            if mode == 0:
                paths = self.yen_ksp(switches, adjacency, pairing[0], pairing[1], 8) #KSP-8
            elif mode == 1:
                paths = self.ecmp(switches, adjacency, pairing[0], pairing[1], 8) #ECMP-8
            elif mode == 2:
                paths = self.ecmp(switches, adjacency, pairing[0], pairing[1], 64) #ECMP-64
            print "Evaluating Pairing from " + str(pairing[0]) + " to " + str(pairing[1])
            #HostToSwitchPathCount.append(0)
            #HostToSwitchPathCount.append(0)
            
            #Begin mod to only pick one valid path per pairing (at random!)

            rand3 = random.randint(0, len(paths) - 1)
            path = paths[rand3]

            #for path in paths: #Iterate through each link in each path and increment accordingly
            for nodeIndex in range(0, len(path)): 
                if nodeIndex < len(path) - 1: #Not the last node
                    node1 = path[nodeIndex][0]
                    node2 = path[nodeIndex + 1][0]
                    #Link is represented as the connection of these two nodes in adjacency matrix
                    #Increment count for both directions of this link, as done for figure 9
#                       print "Host1 in this link: " + str(node1) + " Host2 in this link: " + str(node2) + " Current number of other distinct paths that have traversed this link: " + str(distinct_path_count[node1][node2]) + " which should be equal to " + str(distinct_path_count[node2][node1])
                    
                    distinct_path_count[node1][node2] += 1
                    distinct_path_count[node2][node1] += 1

                    if distinct_path_count[node2][node1] !=  distinct_path_count[node1][node2]:
                        print "ERROR - some link was not counted in both directions: 1,2 gives: " + str(distinct_path_count[node1][node2]) + " while 2,1 gives: " + str(distinct_path_count[node2][node1])

            
                        #print "AFTER INCREMENT Host1 in this link: " + str(node1) + " Host2 in this link: " + str(node2) + " Current number of other distinct paths that have traversed this link: " + str(distinct_path_count[node1][node2])
        #Finished calculating for all links between switches. However, the design of yen_ksp
        # means that links from host -> switch have not yet been considered. Im not sure if I
        # should be counting those anyway

        #Convert this matrix into an ordered ranking of links that exist (requires comparing against adjacency)

        pathCountList = [] #List of all pathCounts

        for i in adjacency:
            for j in adjacency[i]:
                if adjacency[i][j] is not None:
                    pathCountList.append(distinct_path_count[i][j])
                    print "Link from switch " + str(i) + " to " + str(j) + " is on " + str(distinct_path_count[i][j]) + " distinct paths." 
                elif distinct_path_count[i][j] is not None:
                    print "ERROR: COunted on link where none should exist"
                else:
                    print "ERROR: found none in adj matrix"

        pathCountList.sort() #Modifies pathCountList


        return (pathCountList, serverPairs)

    def plot_results(self, ksp_res, ecmp8_res, ecmp64_res):

        ksp_line = plt.plot(ksp_res, label='8 Shortest Paths')
        ecmp8_line = plt.plot(ecmp8_res, label='8-Way ECMP')
        ecmp64_line = plt.plot(ecmp64_res, label='64-Way ECMP')
        plt.legend(loc=2)
        plt.ylabel('# Distinct Paths Link is on')
        plt.xlabel('Rank of Link')
        plt.grid()
        plt.show()

if __name__ == "__main__":
    paths = Paths()
    paths.simple_test()
